import { Inter } from '@next/font/google'
import { Box, Container, filter, Text } from '@chakra-ui/react'
import Head from 'next/head'
import GigCArd from '../components/GigCArd'
import CategoryButtons from '../components/Category'
import { collection, doc, getDoc, getDocs, onSnapshot, query, setDoc, updateDoc, where } from 'firebase/firestore'
import { auth, db } from '../firebase'

import Link from 'next/link'
import { useAuthState } from 'react-firebase-hooks/auth'



const inter = Inter({ subsets: ['latin'] })

export default function Home({ gigs }) {
  const [user] = useAuthState(auth);
  // console.log(gigs)
  // console.log(user.email)
  const day = new Date()
  const dayDate = day.toISOString().slice(0, 10)
  const Today = dayDate
  // console.log(Today)
  async function addToSubcollection({ gg }) {
    const docRef = doc(db, `Gigs/${gg}/CountView`, `${Today}`);
    const docSnap = await getDoc(docRef);
    console.log(docSnap.data())
    if (docSnap.exists()) {
     const counts = docSnap.data()
     const count = counts.count
     await updateDoc(doc(db, "Gigs", gg.toLocaleString(), "CountView", Today), {
      count: count + 1
    })
    } else {
      await setDoc(doc(db, "Gigs", gg.toLocaleString(), "CountView", Today), {
        date:Today,
        count: 1,
      })
    }
  }

  return (
    <>
      <Head>
        <title>StudLance</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/123.svg" />
      </Head>
      <Container maxW="7xl">
        <CategoryButtons />
        <Box p={4} display='flex'>
          {gigs && gigs.map((gig) => {
            if (gig.user != user.uid) {
              return (
                <Link
                  onClick={() => (addToSubcollection({ gg: gig.id }))}
                  key={gig.id}
                  href={`/gigs/${gig.id}`}
                >
                  <GigCArd key={gig.id} gig={gig} />
                </Link>
              )
            }
          })}
        </Box>
      </Container>
    </>
  )
}

export async function getServerSideProps(context) {
  const q = await getDocs(collection(db, "Gigs"), where('user', '==', true));
  const gigs = q.docs && q.docs.length > 0 ? q.docs.map((doc) => {
    return {
      id: doc.id,
      ...doc.data(),
    };
  }) : [];
  return {
    props: {
      gigs
    },
  };
}