import { Inter } from '@next/font/google'
import { Box, Container, Text } from '@chakra-ui/react'
import Head from 'next/head'
import GigCArd from '../components/GigCArd'
import CategoryButtons from '../components/Category'
import { useEffect, useState } from 'react'
import { collection, doc, getDoc, getDocs, onSnapshot, query, where } from 'firebase/firestore'
import { auth, db } from '../firebase'
import useAuth from '../hooks/useAuth'
import Link from 'next/link'
import { useAuthState } from 'react-firebase-hooks/auth'
import { getAuth, onAuthStateChanged } from 'firebase/auth'

const inter = Inter({ subsets: ['latin'] })

export default function Home({gigs}) {
  // const [gigs, setGigs] = useState([]);
  // const { user } = useAuth();
  // const refreshData = () => {
   
  //   const q = query(collection(db, "Gigs"), where("user", "==", use.uid));

  //   onSnapshot(q, (querySnapchot) => {
  //     let ar = [];
  //     querySnapchot.docs.forEach((doc) => {
  //       ar.push({ id: doc.id, ...doc.data() });
  //     });
  //     setGigs(ar);
  //   });
  //   console.log(gigs)
  // };

  // useEffect(() => {
  //   refreshData();
  // }, [user]);

console.log(gigs)

  return (
    <>
      <Head>
        <title>Fiverr</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/fiverrlogo.svg" />
      </Head>
      <Container maxW="7xl">
        <CategoryButtons />
        <Box p={4} display='flex'>
        {gigs && gigs.map((gig)=>(
        <Link
        key={gig.id}
        href={`/gigs/${gig.id}`}
        >
        <GigCArd key={gig.id} gig={gig}  />
        </Link>
        ))}
        </Box>
      </Container>
    </>
  )
}

export async function getServerSideProps() {
  // const auth = getAuth();
  // let user = null;

  // await new Promise((resolve) => {
  //   onAuthStateChanged(auth, (authUser) => {
  //     user = authUser;
  //     resolve();
  //   });
  // });  
  const q = await getDocs(collection(db, "Gigs"), where("e", "==", true));
  const gigs = q.docs && q.docs.length > 0 ? q.docs.map((doc) => {
    return {
      id: doc.id,
      ...doc.data(),
    };
  }) : [];
  return {
    props: {
      gigs
    },
  };
}
